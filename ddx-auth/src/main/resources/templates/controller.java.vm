package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else

#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ddx.common.utils.PageUtil;
import ${cfg.dtoDir}.dto.req.${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}.${entity}AddReq;
import ${cfg.dtoDir}.dto.req.${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}.${entity}EditReq;
import ${cfg.dtoDir}.dto.req.${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}.${entity}QuotaReq;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import com.ddx.common.constant.CommonEnumConstant;
import com.ddx.common.constant.ConstantUtils;
import com.ddx.common.dto.req.BatchDeleteKey;
import com.ddx.common.dto.req.DeleteKey;
import com.ddx.common.dto.resp.PaginatedResult;
import com.ddx.common.exception.ExceptionUtils;
import com.ddx.common.response.BaseResponse;
import com.ddx.common.response.ResponseData;
import org.springframework.beans.BeanUtils;
import org.springframework.web.bind.annotation.*;
import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

/**
 * @ClassName: ${table.controllerName}
 * @Description: $!{table.comment} 前端控制器
 * @author ${author}
 * @since ${date}
 * @Version: 1.0
 */

@Slf4j
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(tags = "$!{table.comment}控制层")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} i${entity}Service;

    @PostMapping("/list")
    @ApiOperation(value = "查询$!{table.comment}列表", notes = "$!{table.comment}")
    public ResponseData<PaginatedResult> getList(@Validated @RequestBody ${entity}QueryReq ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}QueryReq) {
        log.info("get ${entity} list..");
        int page = PageUtil.parsePage(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}QueryReq.getPage(), ConstantUtils.PAGE);
        int perPage = PageUtil.parsePerPage(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}QueryReq.getPerPage(), ConstantUtils.PER_PAGE);
        IPage<${entity}> dataList=i${entity}Service.selectPage(new Page<${entity}>(page, perPage),new QueryWrapper<${entity}>().lambda()
       /*.eq(StringUtils.isNoneBlank(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}QuotaReq),)
        .like(StringUtils.isNoneBlank(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}QuotaReq),)*/
        );
        return ResponseData.out(CommonEnumConstant.PromptMessage.SUCCESS, PaginatedResult.builder()
        .resultData(dataList.getRecords())
        .currentPage((int) dataList.getCurrent())
        .totalCount( dataList.getTotal())
        .totalPage((int) dataList.getPages())
        .build());
    }

    @ApiOperation(value = "添加$!{table.comment}", notes = "$!{table.comment}")
    @PostMapping("/add")
    @Transactional(rollbackFor = Exception.class)
    public BaseResponse add(@Validated @RequestBody ${entity}AddReq  ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}AddReq) {
        log.info("add ${entity} start..");
        ${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)} = new ${entity}();
        BeanUtils.copyProperties(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}AddReq,${entity.substring(0, 1).toLowerCase()}${entity.substring(1)});
        ExceptionUtils.errorBusinessException(!i${entity}Service.save(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}),CommonEnumConstant.PromptMessage.FAILED);
        return ResponseData.out(CommonEnumConstant.PromptMessage.SUCCESS);
    }

    @ApiOperation(value = "修改$!{table.comment}", notes = "$!{table.comment}")
    @PostMapping("/edit")
    @Transactional(rollbackFor = Exception.class)
    public BaseResponse edit(@Validated @RequestBody ${entity}EditReq ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}EditReq) {
        log.info("edit ${entity} start...");
        ${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)} = i${entity}Service.getOne(new QueryWrapper<${entity}>().lambda().eq(${entity}::getId,${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}EditReq.getId()).last("limit 1"));
        ExceptionUtils.errorBusinessException(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)} == null,CommonEnumConstant.PromptMessage.VALIDATED_FAILED);
        BeanUtils.copyProperties(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}EditReq, ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)});
        Boolean yesOrNo = i${entity}Service.update(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)},new QueryWrapper<${entity}>().lambda().eq(${entity}::getId,${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}.getId()));
        ExceptionUtils.errorBusinessException(!yesOrNo,CommonEnumConstant.PromptMessage.FAILED);
        return ResponseData.out(CommonEnumConstant.PromptMessage.SUCCESS);
    }

    @ApiOperation(value = "删除$!{table.comment}", notes = "$!{table.comment}")
    @PostMapping("/delete")
    @Transactional(rollbackFor = Exception.class)
    public BaseResponse delete(@Validated @RequestBody DeleteKey deleteKey) {
        log.info("delete ${entity} start...");
        ExceptionUtils.errorBusinessException(!i${entity}Service.removeById(Long.valueOf(deleteKey.getKeyWord().toString())),CommonEnumConstant.PromptMessage.FAILED);
        return ResponseData.out(CommonEnumConstant.PromptMessage.SUCCESS);
    }

    @ApiOperation(value = "批量删除$!{table.comment}", notes = "$!{table.comment}")
    @PostMapping("/batchDelete")
    @Transactional(rollbackFor = Exception.class)
    public BaseResponse batchDelete(@Validated @RequestBody BatchDeleteKey batchDeleteKey) {
        log.info("batchDelete ${entity} start...");
        ExceptionUtils.errorBusinessException(!i${entity}Service.removeByIds(batchDeleteKey.getKeyWords()),CommonEnumConstant.PromptMessage.FAILED);
        return ResponseData.out(CommonEnumConstant.PromptMessage.SUCCESS);
    }
}
#end